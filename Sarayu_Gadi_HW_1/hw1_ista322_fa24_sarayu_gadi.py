# -*- coding: utf-8 -*-
"""HW1_ISTA322_Fa24_Sarayu_Gadi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V2CrdY09AJUA9zMV96AkEfCuZkB7gn4V

# ISTA 322 Homework 1

Welcome to your first homework!  This one is focused on just practicing some of the exercises covered in the last coding lesson.  There are also some more open-ended questions with elements that I didn't demonstrate in that lesson... they're structurally similar, but you might need to google a thing or two to figure out the correction function.  

You need to add your own code blocks to answer any of the coding questions.  Also, at the end of some sections I have a 'questions' section.  Add a text cell right below and enter your answers.

#Submission Instructions

1) First create a copy of this notebook in your drive and rename it so that it contains the course number (ISTA322), the semester (Sp22 for Spring 2022, Su22 for Summer 2022, and Fa22 for Fall 2022), the assigment code (HW1 for this assignment) and your name.

    e.g. my copy for Spring 2023 would be ISTA_322_Sp23_HW1_dan_charbonneau)

2) When you are ready to submit. Prepare three files: the python file (File->Download->Download .py), the notebook file (File->Download->Download .ipynb), and **PDF** version of your notebook (**after running all cells**).
Note: you can take a screenshot and create the pdf out of them.

3) Create a new directory named firstname_lastname_hw1 (e.g my directory would be dan_charbonneau_hw1) put all three files in it. Compress (Zip) the folder you created with the files inside of it and submit this .zip file to D2L

**incorrect filenames or submission formats will result in a loss of 50% of your grade**

## Loading and Importing

First thing you need to do is load up your packages and then bring in the data.  

This dataset contains daily values for Amazon's stock.  This includes opening, closing, high price, low price, and also the amount of stock traded.
"""

import pandas as pd
# also import matplotlib.pyplot and numpy with the proper aliases
import numpy as np
import matplotlib.pyplot as plt

# Bring in your data. You just need to run this cell.
price = pd.read_csv("https://docs.google.com/spreadsheets/d/1lCkFZhz-NGTuE1ZilzJA_ZYBZsbCSDpS2MllyGZWjX4/gviz/tq?tqx=out:csv")

"""## Exploring the whole dataset

Now make some code cells to explore the whole dataset.  I want you to do the following:

- Get the number of rows and columns
- Get the datatypes of each column
- Look at the first five rows
- Look at the last five rows
- Look at summary statistics
"""

# Obtaining the number of rows and columns
price.shape

# Obtaining the datatypes of every column
price.dtypes

# First 5 rows
 price.head()

# Last 5 rows
price.tail()

# Summary
price.describe()

"""### Questions
Write down Pandas instruction to answer these queries.
- How many rows are in this dataset?
- Do any datatypes need to be converted?
- What was the mean and all time high opening stock price?

Q1: [2 points] How many rows are in this dataset?
"""

#do not change the function name or number of parameters
## Q1 Your function starts here
def price_number_of_row():
  return 0 ##replace this line with the return of the correct statement
## Q1 Your function ends here - Any code outside of these start/end markers won't be graded

"""As an example, I will provide the answer to this question:"""

def price_number_of_row_key():
  return price.shape[0];

print(price_number_of_row_key())

"""Question 2: [2 points] Convert the datatype of 'Date' to an appropriate type"""

## Q2 Your function starts here
def convert_date_type():
  price['Date'] = pd.to_datetime(price['Date']) #replace this line with the correct state. You don't need to return
## Q2 Your function ends here - Any code outside of these start/end markers won't be graded

"""I give you the grader statement for this one too:"""

convert_date_type();
print(price.Date.dtype);

"""Question 3: [2 points] What is the mean of all opening stock price?"""

## Q3 Your function starts here
def mean_of_opening():
  return price.describe().loc['mean']['Open']; #replace this with the correct statement
## Q3 Your function ends here - Any code outside of these start/end markers won't be graded

print(mean_of_opening())

"""Question 4: [4 points] What is the daily min volume for trades after 2010 (including 2010-1-1)"""

## Q4 Your function starts here
def min_daily_volume_after_2010():
  price['Date'] = pd.to_datetime(price['Date'])
  i = price[price['Date'] >= '2010-01-01']
  min_volume = i['Volume'].min()

  return min_volume
## Q4 Your function ends here - Any code outside of these start/end markers won't be graded

print(min_daily_volume_after_2010())

"""Question 5: [4 points] Make a new column called up_binom. The value of up_binom is 1 if the closing price of the stock is higher (>=) than opening price, and 0 otherwise. Then find the number days the stock closed higher than openning.

"""

## Q5 Your function starts here
def number_of_green_days():
  price['up_binom'] = np.where(price['Close'] >= price['Open'], 1, 0)
  ct = 0
  for i in price['up_binom']:
    if i == 1:
      ct += 1
  return(ct)
## Q5 Your function ends here - Any code outside of these start/end markers won't be graded

print(number_of_green_days());

"""Question 6 [4 points] Write a function that plots the Closing price of the stock over the entire timeline of the dataset. The x-axis is day and the y-axis is the Closing price.
Look at the examples here for more help https://matplotlib.org/stable/gallery/index.html)
"""

#plot
## Q6 Your function starts here
def plot_closing_price_after_2020():
  #Add your code for your plot
  plt.plot(price['Date'], price['Close'], color = "purple")
  plt.title("Closing Price of Amazon")
  plt.xlabel("Date")
  plt.ylabel("Closing Price")
  plt.show()

# function call to
plot_closing_price_after_2020()
## Q6 Your function ends here - Any code outside of these start/end markers won't be graded

"""
Question 7: [4 points] Word problem time!

When I was 18 I had saved up $2000 washing dishes at a local restaurant to buy a new gaming rig (a cutting edge Pentium 5 :D). This was actually right around the start of this dataset. Let's say instead of buying that computer, I had put all that money into Amazon stock, what would my total profit have been if I'd sold all of my shares on the last day of the dataset?

Let's say that I bought the shares at opening on Aug 1, 1997 and sold them at close on the last day of the dataset (don't assume that the dataset is sorted by date).

Keep in mind that these are real world data and, as such, have constraints that you need to consider: e.g., you can only buy full shares and not fractions of shares. Also keep in mind that the question is about total **profit**, which should account for the money I spent on the shares. To keep things simple, your answer can (and should for ease of grading) include fractions of cents even though that wouldn't really be possible.

Write a function ***market_value(buy_date, sell_date, starting_cash)*** that calculates the total profit from a number of shares bought at open of one date and sold at close of another date and use it to solve the word problem"""

# I'm going to make your life easier and set the date column you created as the index.
# This will make searching and extracting the values much easier
price = price.set_index('Date')

## Q7 Your function starts here

def market_value(buy_date, sell_date, starting_cash):
    global price
    price = price.reset_index()
    price['Date'] = pd.to_datetime(price['Date'])
    price = price.sort_values('Date')
    price = price.set_index('Date')

    buy = price.loc[buy_date]
    sell = price.loc[sell_date]

    shares_bought = starting_cash // buy['Open']

    total_profit = (shares_bought * sell['Close']) - (shares_bought * buy['Open'])

    return total_profit, shares_bought, buy['Open'], sell['Close']

## Q7 Your function ends here - Any code outside of these start/end markers won't be graded

last_date_in_dataset = price.index.max().strftime('%Y-%m-%d') # replace with code that finds the last date in the dataset
print(market_value('1997-08-01', last_date_in_dataset, 2000))

"""## JSON

The last part of the assignment will have you working with some basic JSON data.  The URL links to a JSON file with stats on every episode of the TV show Silicon Valley

"""

# First just run this to import the data
import requests
url = 'http://api.tvmaze.com/singlesearch/shows?q=Silicon Valley&embed=episodes'
sv_json_obj = requests.get(url)
sv_json = sv_json_obj.json()

"""### Viewing your JSON

Now just to look at what's in the JSON a bit

- Make a code cell that just calls the JSON we named above.
- Also run the .keys() function on the object.
"""

# Calling JSON
sv_json

# Running the .keys() function
sv_json.keys()

"""### Questions

Based on these responses, what keys are present in the JSON.  More importantly, are there any keys that don't get returned by .keys()?

Keys that are present:
- ['id', 'url', 'name', 'type', 'language', 'genres', 'status', 'runtime', 'averageRuntime', 'premiered', 'ended', 'officialSite', 'schedule', 'rating', 'weight', 'network', 'webChannel', 'dvdCountry', 'externals', 'image', 'summary', 'updated', '_links', '_embedded']

Keys that don't get returned:
- Season
- Number
- Airdate
- Airtime
- Airstamp
- Show
"""

# First, you can see the structure after moving down a level into '_embedded'
sv_json['_embedded']

"""Question 8: [4 points] Find the day that show premiered (ie the date that the very first episode first aired)."""

## Q8 Your function starts here
def get_show_premiered():
  return sv_json['_embedded']['episodes'][0]['airdate']
## Q8 Your function ends here - Any code outside of these start/end markers won't be graded

print(get_show_premiered());

"""Question 9: [4 points] Get the summary of a specific episode."""

## Q9 Your function starts here
def get_summary(season, episode):
  for i in range(len(sv_json['_embedded']['episodes'])):
    if sv_json['_embedded']['episodes'][i]['season'] == season and sv_json['_embedded']['episodes'][i]['number'] == episode:
      return sv_json['_embedded']['episodes'][i]['summary']
## Q9 Your function ends here - Any code outside of these start/end markers won't be graded

print(get_summary(2,5))